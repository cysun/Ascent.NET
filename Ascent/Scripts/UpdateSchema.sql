UPDATE "Persons" SET "CampusId" = '200369305' WHERE "CampusId" = '1027';
UPDATE "Persons" SET "CampusId" = 'G123354976' WHERE "CampusId" = '1032';

CREATE TABLE "Projects" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "AcademicYear" character varying(12) NULL,
    "Title" character varying(255) NOT NULL,
    "Description" text NULL,
    "Sponsor" character varying(255) NULL,
    "IsPrivate" boolean NOT NULL,
    CONSTRAINT "PK_Projects" PRIMARY KEY ("Id")
);

CREATE TABLE "ProjectAdvisors" (
    "ProjectId" integer NOT NULL,
    "PersonId" integer NOT NULL,
    CONSTRAINT "PK_ProjectAdvisors" PRIMARY KEY ("ProjectId", "PersonId"),
    CONSTRAINT "FK_ProjectAdvisors_Persons_PersonId" FOREIGN KEY ("PersonId") REFERENCES "Persons" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_ProjectAdvisors_Projects_ProjectId" FOREIGN KEY ("ProjectId") REFERENCES "Projects" ("Id") ON DELETE CASCADE
);

CREATE TABLE "ProjectItems" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "ProjectId" integer NOT NULL,
    "Name" character varying(255) NOT NULL,
    "Type" character varying(10) NOT NULL,
    "FileId" integer NULL,
    "Text" text NULL,
    "Url" character varying(2000) NULL,
    "IsPrivate" boolean NOT NULL,
    CONSTRAINT "PK_ProjectItems" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_ProjectItems_Files_FileId" FOREIGN KEY ("FileId") REFERENCES "Files" ("Id"),
    CONSTRAINT "FK_ProjectItems_Projects_ProjectId" FOREIGN KEY ("ProjectId") REFERENCES "Projects" ("Id") ON DELETE CASCADE
);

CREATE TABLE "ProjectLiaisons" (
    "ProjectId" integer NOT NULL,
    "PersonId" integer NOT NULL,
    CONSTRAINT "PK_ProjectLiaisons" PRIMARY KEY ("ProjectId", "PersonId"),
    CONSTRAINT "FK_ProjectLiaisons_Persons_PersonId" FOREIGN KEY ("PersonId") REFERENCES "Persons" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_ProjectLiaisons_Projects_ProjectId" FOREIGN KEY ("ProjectId") REFERENCES "Projects" ("Id") ON DELETE CASCADE
);

CREATE TABLE "ProjectStudents" (
    "ProjectId" integer NOT NULL,
    "PersonId" integer NOT NULL,
    CONSTRAINT "PK_ProjectStudents" PRIMARY KEY ("ProjectId", "PersonId"),
    CONSTRAINT "FK_ProjectStudents_Persons_PersonId" FOREIGN KEY ("PersonId") REFERENCES "Persons" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_ProjectStudents_Projects_ProjectId" FOREIGN KEY ("ProjectId") REFERENCES "Projects" ("Id") ON DELETE CASCADE
);

CREATE INDEX "IX_ProjectAdvisors_PersonId" ON "ProjectAdvisors" ("PersonId");

CREATE INDEX "IX_ProjectItems_FileId" ON "ProjectItems" ("FileId");

CREATE INDEX "IX_ProjectItems_ProjectId" ON "ProjectItems" ("ProjectId");

CREATE INDEX "IX_ProjectLiaisons_PersonId" ON "ProjectLiaisons" ("PersonId");

CREATE INDEX "IX_ProjectStudents_PersonId" ON "ProjectStudents" ("PersonId");

DELETE FROM "__EFMigrationsHistory";
INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion") VALUES ('20221115190029_InitialSchema', '7.0.0');

-- FTS on Projects

ALTER TABLE "Projects" ADD COLUMN tsv tsvector;

CREATE INDEX "ProjectsTsIndex" ON "Projects" USING GIN(tsv);

CREATE OR REPLACE FUNCTION "ProjectsTsTriggerFunction"() RETURNS TRIGGER AS $$
BEGIN
    NEW.tsv := setweight(to_tsvector(NEW."Title"), 'A') ||
               setweight(to_tsvector(coalesce(NEW."Sponsor",'')), 'A') ||
               setweight(to_tsvector(coalesce(NEW."Description",'')), 'D');
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER "ProjectsTsTrigger"
    BEFORE INSERT OR UPDATE ON "Projects"
    FOR EACH ROW EXECUTE PROCEDURE "ProjectsTsTriggerFunction"();

CREATE OR REPLACE FUNCTION "SearchProjects"(varchar, integer DEFAULT NULL)
RETURNS SETOF "Projects" AS $$
BEGIN
    RETURN QUERY SELECT * FROM "Projects" WHERE plainto_tsquery($1) @@ tsv LIMIT $2;
    RETURN;
 END
$$ LANGUAGE plpgsql;
