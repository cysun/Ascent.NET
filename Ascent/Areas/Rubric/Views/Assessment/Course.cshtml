@using System.Text.Json
@model Dictionary<RubricAssessmentType, object[][]>
@{
    ViewData["Title"] = "Rubric Assessment Data";
}
<nav class="d-none d-md-block">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Rubric" asp-action="Index">Rubrics</a></li>
        <li class="breadcrumb-item"><a asp-controller="Rubric" asp-action="View" asp-route-id="@ViewBag.Rubric.Id">@ViewBag.Rubric.Name</a></li>
        <li class="breadcrumb-item"><a asp-action="Index" asp-route-rubricId="@ViewBag.Rubric.Id">Assessments</a></li>
        <li class="breadcrumb-item active">@ViewBag.Course.Code</li>
    </ol>
</nav>

<div class="row mb-3">
    <label class="col-auto col-form-label" for="fromYear">From</label>
    <div class="col-auto">
        <select id="fromYear" class="form-select">
            @foreach (var year in ViewBag.Years)
            {
                if (year == ViewBag.FromYear)
                {
                    <option selected>@year</option>
                }
                else
                {
                    <option>@year</option>
                }
            }
        </select>
    </div>
    <label class="col-auto col-form-label" for="toYear">To</label>
    <div class="col-auto">
        <select id="toYear" class="form-select">
            @foreach (var year in ViewBag.Years)
            {
                if (year == ViewBag.ToYear)
                {
                    <option selected>@year</option>
                }
                else
                {
                    <option>@year</option>
                }
            }
        </select>
    </div>
    <label class="col-auto col-form-label" for="plotLine">Plot Line</label>
    <div class="col-auto">
        <input id="plotLine" type="number" class="form-control" size="2" value="80" min="5" max="95" />
    </div>
    <div class="col-auto">
        <div class="btn-group" role="group">
            <button id="removeFirst" class="btn btn-outline-secondary" title="Remove First"><i class="bi bi-box-arrow-left"></i></button>
            <button id="removeLast" class="btn btn-outline-secondary" title="Remove Last"><i class="bi bi-box-arrow-right"></i></button>
        </div>
    </div>
</div>

<div class="row row-cols-1 g-4">
    @foreach (var assessmentType in Enum.GetValues<RubricAssessmentType>())
    {
        if (Model.ContainsKey(assessmentType))
        {
            <div class="col">
                <div class="card">
                    <div class="card-header">@assessmentType.ToString() Assessment</div>
                    <div class="card-body">
                        <div id="chart@(assessmentType)" style="height: 600px;"></div>
                        @for (int i = 0; i < ViewBag.Criteria.Count; ++i)
                        {
                            <table class="table table-bordered caption-top d-none d-md-table">
                                <caption>@ViewBag.Criteria[i].Name</caption>
                                <thead>
                                    <tr>
                                        <th>Year</th>
                                        <th>Unsatisfactory</th>
                                        <th>Needs Improvement</th>
                                        <th>Meets Expectations</th>
                                        <th>Exceeds Expectations</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int j = 0; j < Model[assessmentType].Length; ++j)
                                    {
                                        if (j % ViewBag.Criteria.Count == i)
                                        {
                                            <tr>
                                                @for (int k = 0; k < Model[assessmentType][j].Length; ++k)
                                                    if (k != 1)
                                                    {
                                                        <td>@Model[assessmentType][j][k]</td>
                                                    }
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@section HeadScripts {
    <script src="https://code.highcharts.com/highcharts.js"></script>
}
@section Scripts {
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/offline-exporting.js"></script>
    <script>
        $(function () {
            var data = @Html.Raw(JsonSerializer.Serialize(Model));
            // console.log(data);
            var charts = [];
            for (const property in data) {
                let dataByYear = {};
                for (const row of data[property]) {
                    if (!dataByYear[row[0]]) {
                        dataByYear[row[0]] = [];
                    }
                    dataByYear[row[0]].push(row);
                }
                // console.log(dataByYear);
                let series = [];
                let showInLegend = true;
                for (const year in dataByYear) {
                    series.push({
                        name: 'Unsatisfactory',
                        data: dataByYear[year].map(r => r[2]),
                        stack: year,
                        showInLegend: showInLegend
                    }, {
                        name: 'Needs Improvement',
                        data: dataByYear[year].map(r => r[3]),
                        stack: year,
                        showInLegend: showInLegend
                    }, {
                        name: 'Meets Expectations',
                        data: dataByYear[year].map(r => r[4]),
                        stack: year,
                        showInLegend: showInLegend
                    }, {
                        name: 'Exceeds Expectations',
                        data: dataByYear[year].map(r => r[5]),
                        stack: year,
                        showInLegend: showInLegend
                    });
                    showInLegend = false;
                }
                let chart = {
                    container: `chart${property}`, // e.g. chartInstructor
                    options: {
                        title: {
                            text: `@ViewBag.Rubric.Name, @ViewBag.Course.Code @(ViewBag.FromYear)-@(ViewBag.ToYear), Assessment by ${property}`
                        },
                        xAxis: {
                            categories: data[property].filter(e => e[0] == data[property][0][0]).map(e => e[1])
                        },
                        yAxis: {
                            title: {
                                text: 'Percentage of Students'
                            },
                            labels: {
                                formatter: function () {
                                    return this.value + '%';
                                }
                            },
                            max: 105,
                            endOnTick: false,
                            stackLabels: {
                                enabled: true,
                                formatter: function () {
                                    return this.stack;
                                }
                            },
                            plotLines: [{
                                value: 80,
                                color: 'blue',
                                width: 2
                            }]
                        },
                        series: series,
                        chart: {
                            type: 'column'
                        },
                        plotOptions: {
                            column: {
                                stacking: 'percent'
                            }
                        },
                        exporting: {
                            sourceHeight: 600,
                            sourceWidth: 1200
                        },
                        colors: ['red', 'yellow', 'greenyellow', 'green']
                    }
                };
                charts.push(Highcharts.chart(chart.container, chart.options));
            }
            $("#plotLine").change(function () {
                charts.forEach(c => c.update({
                    yAxis: {
                        plotLines: [{
                            value: $(this).val(),
                            color: 'blue',
                            width: 2
                        }]
                    }
                }));
            });
            $("#removeFirst").click(function () {
                charts.forEach(c => {
                    c.series.forEach(s => s.removePoint(0));
                });
            });
            $("#removeLast").click(function () {
                charts.forEach(c => {
                    let length = c.series[0].data.length;
                    c.series.forEach(s => s.removePoint(length - 1));
                });
            });
            $("select").change(function () {
                var fromYear = $("#fromYear").val();
                var toYear = $("#toYear").val();
                if (fromYear <= toYear)
                    window.location.href = `course?rubricId=@(ViewBag.Rubric.Id)&courseId=@(ViewBag.Course.Id)&fromYear=${fromYear}&toYear=${toYear}`;
            });
        });
    </script>
}
