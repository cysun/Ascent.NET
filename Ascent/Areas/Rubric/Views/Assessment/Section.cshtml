@using System.Text.Json
@model Dictionary<RubricAssessmentType, object[][]>
@{
    ViewData["Title"] = "Rubric Assessment Data";
}
<nav class="d-none d-md-block">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Rubric" asp-action="Index">Rubrics</a></li>
        <li class="breadcrumb-item"><a asp-controller="Rubric" asp-action="View" asp-route-id="@ViewBag.Rubric.Id">@ViewBag.Rubric.Name</a></li>
        <li class="breadcrumb-item"><a asp-action="Index" asp-route-rubricId="@ViewBag.Rubric.Id">Assessments</a></li>
        <li class="breadcrumb-item active">@ViewBag.Course.Code, @ViewBag.Term.Name</li>
    </ol>
</nav>

<div class="row row-cols-1 g-4">
    @foreach (var assessmentType in Enum.GetValues<RubricAssessmentType>())
    {
        if (Model.ContainsKey(assessmentType))
        {
            <div class="col">
                <div class="card">
                    <div class="card-header">@assessmentType.ToString() Assessment</div>
                    <div class="card-body">
                        <div id="chart@(assessmentType)" style="height: 600px;"></div>
                        <table class="table table-bordered d-none d-md-table">
                            <thead>
                                <tr>
                                    <th>Criterion</th>
                                    <th>Unsatisfactory</th>
                                    <th>Needs Improvement</th>
                                    <th>Meets Expectations</th>
                                    <th>Exceeds Expectations</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var row in Model[assessmentType])
                                {
                                    <tr>
                                        @foreach (var col in row)
                                        {
                                            <td>@col</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    }
</div>

@section HeadScripts {
    <script src="https://code.highcharts.com/highcharts.js"></script>
}
@section Scripts {
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/offline-exporting.js"></script>
    <script>
        $(function () {
            var data = @Html.Raw(JsonSerializer.Serialize(Model));
            // console.log(data);
            for (const property in data) {
                let chart = {
                    container: `chart${property}`, // e.g. chartInstructor
                    options: {
                        title: {
                            text: `@ViewBag.Rubric.Name, @ViewBag.Course.Code @ViewBag.Term.ShortName, Assessment by ${property}`
                        },
                        xAxis: {
                            categories: data[property].map(e => e[0])
                        },
                        yAxis: {
                            min: 0,
                            title: {
                                text: 'Percentage of Students'
                            },
                            labels: {
                                formatter: function () {
                                    return this.value + '%';
                                }
                            }
                        },
                        series: [{
                            name: 'Exceeds Expectations',
                            data: data[property].map(r => r[4])
                        }, {
                            name: 'Meets Expectations',
                            data: data[property].map(r => r[3])
                        }, {
                            name: 'Needs Improvement',
                            data: data[property].map(r => r[2])
                        }, {
                            name: 'Unsatisfactory',
                            data: data[property].map(r => r[1])
                        }],
                        chart: {
                            type: 'column'
                        },
                        plotOptions: {
                            column: {
                                stacking: 'percent'
                            }
                        },
                        exporting: {
                            sourceHeight: 600,
                            sourceWidth: 1200
                        },
                        colors: ['green', 'greenyellow', 'yellow', 'red']
                    }
                };
                Highcharts.chart(chart.container, chart.options);
            }
        });
    </script>
}