@using System.Text.Json
@model Dictionary<ConstituencyType, object[][]>
@{
    ViewData["Title"] = "Outcome Survey Charts - Outcome";
    var Outcome = (ProgramOutcome)ViewBag.Outcome;
}
<nav>
    <ol class="breadcrumb">
        <li class="breadcrumb-item d-none d-md-block"><a asp-controller="Survey" asp-action="Index">Surveys</a></li>
        <li class="breadcrumb-item d-none d-md-block"><a asp-controller="OutcomeSurvey" asp-action="Index">Outcome Surveys</a></li>
        <li class="breadcrumb-item"><a asp-action="Index">Charts</a></li>
        <li class="breadcrumb-item active">@Outcome.Program.Name - Outcome #@(Outcome.Index + 1)</li>
    </ol>
</nav>

<div class="row mb-3">
    <label class="col-auto col-form-label">From</label>
    <div class="col-auto">
        <select id="fromYear" class="form-select">
            @foreach (var year in ViewBag.Years)
            {
                if (year == ViewBag.FromYear)
                {
                    <option selected>@year</option>
                }
                else
                {
                    <option>@year</option>
                }
            }
        </select>
    </div>
    <label class="col-auto col-form-label">To</label>
    <div class="col-auto">
        <select id="toYear" class="form-select">
            @foreach (var year in ViewBag.Years)
            {
                if (year == ViewBag.ToYear)
                {
                    <option selected>@year</option>
                }
                else
                {
                    <option>@year</option>
                }
            }
        </select>
    </div>
    <div class="col-auto">
        <label class="col-form-label" for="plotLine">Plot Line</label>
    </div>
    <div class="col-auto">
        <input id="plotLine" type="number" class="form-control" size="2" value="70" min="5" max="95" />
    </div>
</div>

<div class="card">
    <div class="card-header">Survey Result Summary</div>
    <div class="card-body">
        <div id="surveyChart" style="height: 600px;"></div>
        @foreach (var constituencyType in Enum.GetValues<ConstituencyType>())
        {
            if (Model.ContainsKey(constituencyType))
            {
                <table class="table table-bordered caption-top d-none d-md-table">
                    <caption>@constituencyType.ToString() Survey</caption>
                    <thead>
                        <tr>
                            <th>Year</th>
                            <th>Strongly Disagree</th>
                            <th>Disagree</th>
                            <th>Neither Agree or Disagree</th>
                            <th>Agree</th>
                            <th>Strongly Agree</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model[constituencyType])
                        {
                            <tr>
                                @foreach (var col in row)
                                {
                                    <td>@col</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    </div>
</div>

@section HeadScripts {
    <script src="https://code.highcharts.com/highcharts.js"></script>
}
@section Scripts {
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/offline-exporting.js"></script>
    <script>
        $(function () {
            var data = @Html.Raw(JsonSerializer.Serialize(Model));
            // console.log(data);
            var dataByYear = {};
            var categories = [];
            var series = [];
            for (const property in data) {
                categories.push(property);
                for (const row of data[property]) {
                    if (!dataByYear[row[0]]) {
                        dataByYear[row[0]] = [];
                    }
                    dataByYear[row[0]].push(row);
                }
            }
            let showInLegend = true;
            for (const year in dataByYear) {
                series.push({
                    name: 'Strongly Disagree',
                    data: dataByYear[year].map(r => r[1]),
                    stack: year,
                    showInLegend: showInLegend
                }, {
                    name: 'Disagree',
                    data: dataByYear[year].map(r => r[2]),
                    stack: year,
                    showInLegend: showInLegend
                }, {
                    name: 'Neither Agree or Disagree',
                    data: dataByYear[year].map(r => r[3]),
                    stack: year,
                    showInLegend: showInLegend
                }, {
                    name: 'Agree',
                    data: dataByYear[year].map(r => r[4]),
                    stack: year,
                    showInLegend: showInLegend
                }, {
                    name: 'Strongly Agree',
                    data: dataByYear[year].map(r => r[5]),
                    stack: year,
                    showInLegend: showInLegend
                });
                showInLegend = false;
            }
            let chart = {
                container: 'surveyChart',
                options: {
                    title: {
                        text: '@Outcome.Program.Name Survey, SO #@(Outcome.Index + 1), @(ViewBag.FromYear)-@(ViewBag.ToYear)'
                    },
                    xAxis: {
                        categories: categories
                    },
                    yAxis: {
                        title: {
                            text: 'Percentage of Responses'
                        },
                        labels: {
                            formatter: function () {
                                return this.value + '%';
                            }
                        },
                        max: 105,
                        endOnTick: false,
                        stackLabels: {
                            enabled: true,
                            formatter: function () {
                                return this.stack;
                            }
                        },
                        plotLines: [{
                            value: 70,
                            color: 'blue',
                            width: 2
                        }]
                    },
                    series: series,
                    chart: {
                        type: 'column'
                    },
                    plotOptions: {
                        column: {
                            stacking: 'percent'
                        }
                    },
                    exporting: {
                        sourceHeight: 600,
                        sourceWidth: 1200
                    },
                    colors: ['red', 'orange', 'yellow', 'greenyellow', 'green']
                }
            };
            let hchart = Highcharts.chart(chart.container, chart.options);
            $("#plotLine").change(function () {
                hchart.update({
                    yAxis: {
                        plotLines: [{
                            value: $(this).val(),
                            color: 'blue',
                            width: 2
                        }]
                    }
                });
            });
            $("select").change(function () {
                var fromYear = $("#fromYear").val();
                var toYear = $("#toYear").val();
                if (fromYear <= toYear)
                    window.location.href = `../outcome/@(Outcome.Id)?fromYear=${fromYear}&toYear=${toYear}`;
            });
        });
    </script>
}
